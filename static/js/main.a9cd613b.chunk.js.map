{"version":3,"sources":["components/Cell/Cell.module.css","components/GameInfo/GameInfo.module.css","containers/field/types.ts","containers/field/helpers.ts","containers/field/calculateWinner.ts","containers/field/fieldSlice.ts","app/store.ts","components/Cell/Cell.tsx","components/GameInfo/GameInfo.tsx","app/hooks.ts","containers/field/Field.tsx","App.tsx","serviceWorker.ts","index.tsx","containers/field/Field.module.css"],"names":["module","exports","Player","CellState","getKeyForCell","x","y","getAdjacentCells","props","coordinatesCalcFunc","cellsResult","i","winCondition","coordinates","key","cell","cells","push","hasWinnerInCells","state","iterator","lastIndex","length","winningCells","slice","winner","X","First","Second","GAME_FIELD_SIDES_LENGTH","initialState","initiative","Array","fill","forEach","_","indexRow","indexColumn","initCellsState","gameFieldSideLength","parseInt","process","gameFinished","cellsWithValues","fieldSlice","createSlice","name","reducers","playerMove","action","payload","cellValue","O","lastX","lastY","diagonalLeftToRight","w","diagonalRightToLeft","horizontal","vertical","checkField","actions","store","configureStore","reducer","field","useAppSelector","useSelector","Cell","dispatch","useDispatch","renderValue","useCallback","value","className","styles","disabled","onClick","data-testid","GameInfo","initative","winnerText","panel","Field","sidesLength","array","useMemo","getField","map","row","useEffect","alert","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a9cd613b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Cell_cell__3-ueS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"panel\":\"GameInfo_panel__z95Da\"};","export type CellInfo = Coordinates & {\n  state: CellState | null;\n};\n\nexport enum Player {\n  \"First\",\n  \"Second\",\n}\n\nexport enum CellState {\n    'X',\n    'O'\n}\n\nexport type Coordinates = {\n  x: number;\n  y: number;\n};\n","import { CellState, Player } from \"./types\";\n\nexport const getKeyForCell = (x: number, y: number) => `${x}_${y}`;\n\nexport const stateToPlayer = (state: CellState | null): Player | null => {\n  if (state === null) {\n    return null;\n  }\n  if (state === CellState.X) {\n    return Player.First;\n  }\n  return Player.Second;\n};\n","import { getKeyForCell, stateToPlayer } from \"./helpers\";\nimport { CellInfo, Coordinates, Player } from \"./types\";\n\ntype CoordinatesCalcFuncType = (\n  x: number,\n  y: number,\n  winCondition: number,\n  i: number\n) => Coordinates;\n\n/**\n * Function `checkField` checks field for a winning condition.\n * It does not iterate over all cells, but rather receives\n * coordinates of last move and checks only cells adjacent to it.\n */\nexport const checkField = (\n  cells: Record<string, CellInfo>,\n  lastX: number,\n  lastY: number,\n  winCondition: number\n): Player | null => {\n  const props = { cells, x: lastX, y: lastY, winCondition };\n  // left-to-right\n  const diagonalLeftToRight = getAdjacentCells(props, (x, y, w, i) => ({\n    x: x - w + i,\n    y: y - w + i,\n  }));\n  // right-to-left\n  const diagonalRightToLeft = getAdjacentCells(props, (x, y, w, i) => ({\n    x: x - w + i,\n    y: y + w - i,\n  }));\n  // horizontal\n  const horizontal = getAdjacentCells(props, (x, y, w, i) => ({\n    x: x - w + i,\n    y,\n  }));\n  // vertical\n  const vertical = getAdjacentCells(props, (x, y, w, i) => ({\n    x,\n    y: y - w + i,\n  }));\n\n  return (\n    hasWinnerInCells(diagonalLeftToRight, winCondition).winner ??\n    hasWinnerInCells(diagonalRightToLeft, winCondition).winner ??\n    hasWinnerInCells(horizontal, winCondition).winner ??\n    hasWinnerInCells(vertical, winCondition).winner\n  );\n};\n\nconst getAdjacentCells = (\n  props: {\n    cells: Record<string, CellInfo>;\n    x: number;\n    y: number;\n    winCondition: number;\n  },\n  coordinatesCalcFunc: CoordinatesCalcFuncType\n): (CellInfo & Coordinates)[] => {\n  const cellsResult: (CellInfo & Coordinates)[] = [];\n\n  for (let i = 0; i < props.winCondition * 2; i++) {\n    const coordinates = coordinatesCalcFunc(\n      props.x,\n      props.y,\n      props.winCondition,\n      i\n    );\n    const key = getKeyForCell(coordinates.x, coordinates.y);\n    const cell = props.cells[key];\n    if (cell) {\n      cellsResult.push({ ...cell, x: coordinates.x, y: coordinates.y });\n    }\n  }\n\n  return cellsResult;\n};\n\nexport const hasWinnerInCells = (\n  cells: CellInfo[],\n  winCondition: number\n): {\n  winningCells: CellInfo[];\n  winner: Player | null;\n} => {\n  // arrays are popullated one-by-one, so\n  // simply check `winCondition` cells\n  // ticked by one player\n  let iterator = 0;\n  let lastIndex = 0;\n  for (let i = 0; i < cells.length; i++) {\n    if (cells[i].state !== null) {\n      lastIndex = i;\n      if (iterator > 0) {\n        const isSameAuthor = cells[i - 1].state === cells[i].state;\n        if (isSameAuthor) {\n          iterator++;\n        } else {\n          iterator = 1;\n        }\n      } else {\n        iterator++;\n      }\n    } else {\n      iterator = 0;\n    }\n\n    if (iterator === winCondition) {\n      return {\n        winningCells: cells.slice(lastIndex, winCondition),\n        winner: stateToPlayer(cells[lastIndex].state),\n      };\n    }\n  }\n\n  return {\n    winningCells: [],\n    winner: null,\n  };\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { checkField } from \"./calculateWinner\";\nimport { getKeyForCell } from \"./helpers\";\nimport { CellInfo, CellState, Coordinates, Player } from \"./types\";\n\nconst GAME_FIELD_SIDES_LENGTH = 100;\n\nconst initCellsState = () => {\n  const cells: Record<string, CellInfo> = {};\n  Array(GAME_FIELD_SIDES_LENGTH)\n    .fill(null)\n    .forEach((_, indexRow) => {\n      Array(GAME_FIELD_SIDES_LENGTH)\n        .fill(null)\n        .forEach((_, indexColumn) => {\n          const key = `${indexRow}_${indexColumn}`;\n          cells[key] = {\n            state: null,\n            x: indexRow,\n            y: indexColumn,\n          };\n        });\n    });\n  return cells;\n};\n\nexport interface FieldState {\n  initiative: Player;\n  cells: Record<string, CellInfo>;\n  gameFieldSideLength: number;\n  winCondition: number; // how many to cross\n  winner: Player | null;\n  cellsWithValues: number;\n  gameFinished: boolean;\n}\n\nconst initialState: FieldState = {\n  initiative: Player.First,\n  cells: initCellsState(),\n  gameFieldSideLength: GAME_FIELD_SIDES_LENGTH,\n  winCondition: parseInt(process.env.REACT_APP_WIN_CONDITION!, 10),\n  winner: null,\n  gameFinished: false,\n  cellsWithValues: 0,\n};\n\nexport const fieldSlice = createSlice({\n  name: \"field\",\n  initialState,\n  reducers: {\n    playerMove: (state: FieldState, action: PayloadAction<Coordinates>) => {\n      // do nothing if not 0,0 is clicked on first turn\n      if (\n        state.cellsWithValues === 0 &&\n        state.initiative === Player.First &&\n        (action.payload.x !== 0 || action.payload.y !== 0)\n      ) {\n        return;\n      }\n\n      if (state.gameFinished) {\n        return;\n      }\n\n      // change initiative\n      state.initiative =\n        state.initiative === Player.First ? Player.Second : Player.First;\n\n      const key = getKeyForCell(action.payload.x, action.payload.y);\n      const cellValue = state.cells[key];\n      if (cellValue) {\n        cellValue.state =\n          state.initiative === Player.First ? CellState.X : CellState.O;\n        if (cellValue.state !== null) {\n          cellValue.state =\n            cellValue.state === CellState.X ? CellState.O : CellState.X;\n        } else {\n          cellValue.state = CellState.X;\n        }\n      }\n\n      if (cellValue.state !== null) {\n        state.cellsWithValues++;\n      }\n\n      state.winner = checkField(\n        state.cells,\n        action.payload.x,\n        action.payload.y,\n        state.winCondition\n      );\n\n      if (state.winner !== null) {\n        state.gameFinished = true;\n      }\n\n      // if there are no moves left - finish game\n      if (state.cellsWithValues === GAME_FIELD_SIDES_LENGTH ** 2) {\n        state.gameFinished = true;\n      }\n    },\n  },\n});\n\nexport const { playerMove } = fieldSlice.actions;\n\nexport default fieldSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { TypedUseSelectorHook, useSelector } from \"react-redux\";\nimport { fieldSlice } from \"../containers/field/fieldSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    field: fieldSlice.reducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useAppSelector } from \"../../app/store\";\nimport { playerMove } from \"../../containers/field/fieldSlice\";\nimport { getKeyForCell } from \"../../containers/field/helpers\";\nimport { CellState, Coordinates } from \"../../containers/field/types\";\nimport styles from \"./Cell.module.css\";\n\nexport const Cell: React.FC<Coordinates> = ({ x, y }) => {\n  const dispatch = useDispatch();\n  const cellValue = useAppSelector(\n    (state) => state.field.cells[getKeyForCell(x, y)]\n  );\n\n  const renderValue = useCallback((value: CellState | null) => {\n    if (value === CellState.X) {\n      return \"X\";\n    }\n    if (value === CellState.O) {\n      return \"O\";\n    }\n    return \"\";\n  }, []);\n\n  return (\n    <button\n      className={styles.cell}\n      disabled={cellValue.state !== null}\n      onClick={() => dispatch(playerMove({ x, y }))}\n      data-testid={`cell_${x}_${y}`}\n    >\n      {renderValue(cellValue.state)}\n    </button>\n  );\n};\n","import React from \"react\";\nimport { useAppSelector } from \"../../app/store\";\nimport { Player } from \"../../containers/field/types\";\n\nimport styles from \"./GameInfo.module.css\";\n\nexport function GameInfo() {\n  const initative = useAppSelector((state) => state.field.initiative);\n  const winner = useAppSelector((state) => state.field.winner);\n  const gameFinished = useAppSelector((state) => state.field.gameFinished);\n\n  let winnerText = \"\";\n\n  if (winner === Player.First) {\n    winnerText = \"first\";\n  } else if (winner === Player.Second) {\n    winnerText = \"second\";\n  }\n\n  return (\n    <div className={styles.panel}>\n      <div>First move is always to left top cell with (0,0) coordinates.</div>\n      <div>\n        It's {initative === Player.First ? \"first\" : \"second\"} player's turn!\n      </div>\n      <div>Game finished: {gameFinished ? \"yes\" : \"no\"}</div>\n      {winnerText && <div>Winner is: {winnerText} player!</div>}\n    </div>\n  );\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useEffect, useMemo } from \"react\";\n\nimport styles from \"./Field.module.css\";\nimport { Cell } from \"../../components/Cell\";\nimport { getKeyForCell } from \"./helpers\";\nimport { GameInfo } from \"../../components/GameInfo\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport { Player } from \"./types\";\n\nexport function Field() {\n  const sidesLength = useAppSelector(\n    (state) => state.field.gameFieldSideLength\n  );\n\n  const array = useMemo(() => Array(sidesLength).fill(null), [sidesLength]);\n\n  const winner = useAppSelector((state) => state.field.winner);\n  const gameFinished = useAppSelector((state) => state.field.gameFinished);\n\n  const getField = useMemo(() => {\n    return array.map((_, x) => (\n      <div key={`row_${x}`} className={styles.row}>\n        {array.map((_, y) => (\n          <Cell key={getKeyForCell(x, y)} x={x} y={y} />\n        ))}\n      </div>\n    ));\n  }, [array]);\n\n  useEffect(\n    function checkWinner() {\n      if (winner !== null) {\n        alert(\n          `Winner is ${\n            winner === Player.First ? \"first\" : \"second\"\n          } player! Congratulations`\n        );\n      } else if (gameFinished) {\n        alert(`Game has finished!`);\n      }\n    },\n    [winner, gameFinished]\n  );\n\n  return (\n    <div className={styles.field}>\n      {getField}\n      <GameInfo />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\n\nimport { Field } from \"./containers/field/Field\";\nimport \"./App.css\";\nimport { store } from \"./app/store\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Field />\n      </div>\n    </Provider>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"field\":\"Field_field__3JLdk\",\"row\":\"Field_row__1zs4k\"};"],"sourceRoot":""}